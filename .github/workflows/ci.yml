name: CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  ci:
    name: CI
    # Execute the CI on the course's runners
    runs-on: ubuntu-latest

    steps:
      # First step : Checkout the repository on the runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of Sonar analysis (if we use Sonar Later)


      # Kernel-based Virtual Machine (KVM) is an open source virtualization technology built into Linux. Enabling it allows the Android emulator to run faster.
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      # Caching is a very useful part of a CI, as a workflow is executed in a clean environment every time,
      # this means that one would need to re-download and re-process gradle files for every run. Which is very time consuming.
      #
      # To avoid that, we cache the the gradle folder to reuse it later.
      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # Cache the Emulator, if the cache does not hit, create the emulator
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-34

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back virtualscene
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Grant execute permission for gradlew
        run: |
          chmod +x ./gradlew

      # Decode google-services.json to be able to user Firestore
      - name: Decode google-services.json
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > app/google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}

      # Check formatting
      - name: KTFmt Check
        run: |
          ./gradlew ktfmtCheck

      # This step runs gradle commands to build the application
      - name: Assemble
        run: |
          # To run the CI with debug information, add --info
          ./gradlew assembleDebug lint --parallel --build-cache
        env:
          PLANTNET_API_KEY: ${{ secrets.PLANTNET_API_KEY }}

      # Run Unit tests
      - name: Run tests
        run: |
          # To run the CI with debug information, add --info
          ./gradlew testDebugUnitTest --parallel --build-cache
        env:
          PLANTNET_API_KEY: ${{ secrets.PLANTNET_API_KEY }}

      #Firebase emulator setup
      - name: Install Node + Firebase CLI
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Firebase tools
        run: npm i -g firebase-tools@13

      - name: Read Firebase projectId
        id: firebase_project
        run: |
          echo "project_id=$(jq -r '.project_info.project_id' app/google-services.json)" >> $GITHUB_OUTPUT
          
      - name: Create firebase.json
        run: |
          cat > firebase.json <<'JSON'
          {
            "emulators": {
              "auth": { "port": 9099, "host": "0.0.0.0" },
              "firestore": { "port": 8080, "host": "0.0.0.0" }
            }
          }
          JSON

      - name: Start Firebase emulators
        run: |
          if [ -e "firebase.json" ]; then
            echo "Starting Firebase emulators for instrumentation tests..."
            firebase emulators:start --only auth,firestore --project "${{ steps.firebase_project.outputs.project_id }}" &
            sleep 5
            echo "Firebase emulators started in background"
          else
            echo "firebase.json not found - skipping emulators (tests may fail)"
          fi
      # Run connected tests on the emulator
      - name: Run tests with camera
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          device: pixel_8
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -skin 1080x2400 -dpi-device 420 -noaudio -no-boot-anim -camera-back emulated  -camera-front webcam0 -memory 4096 -partition-size 4096
          disable-animations: true
          script: |
            echo "Starting instrumented tests..."
            export CI=true
            ./gradlew connectedCheck --parallel --build-cache -Pandroid.testInstrumentationRunnerArguments.annotation=com.android.mygarden.screen.RequiresCamera -Pandroid.testInstrumentationRunnerArguments.notPackage=com.android.mygarden.zendToEnd
        env:
          PLANTNET_API_KEY: ${{ secrets.PLANTNET_API_KEY }}

      - name: Run tests no camera
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          device: pixel_8
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -skin 1080x2400 -dpi-device 420 -noaudio -no-boot-anim -camera-back none -camera-front none -memory 4096 -partition-size 4096
          disable-animations: true
          script: |
            adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
            # Forward Firebase emulator ports to Android emulator
            adb reverse tcp:9099 tcp:9099   # Auth
            adb reverse tcp:8080 tcp:8080   # Firestore
            adb reverse tcp:4400 tcp:4400 || true

            export CI=true
            adb shell pm revoke com.android.mygarden android.permission.CAMERA

            ./gradlew connectedCheck --parallel --build-cache \
              -Pandroid.testInstrumentationRunnerArguments.notAnnotation=com.android.mygarden.screen.RequiresCamera \
              -Pandroid.testInstrumentationRunnerArguments.notPackage=com.android.mygarden.zendToEnd
        env:
          PLANTNET_API_KEY: ${{ secrets.PLANTNET_API_KEY }}

      # This step generates the coverage report which will be uploaded to sonar
      - name: Generate Coverage Report
        run: |
          ./gradlew jacocoTestReport --info --stacktrace --no-daemon

      # Upload the various reports to sonar
      - name: Upload report to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --info --build-cache -Dsonar.token=${{ secrets.SONAR_TOKEN }}